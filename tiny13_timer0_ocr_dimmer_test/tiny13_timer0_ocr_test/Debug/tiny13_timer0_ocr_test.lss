
tiny13_timer0_ocr_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000000ca  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000115  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b1  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f2  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	4f c0       	rjmp	.+158    	; 0xa6 <__vector_3>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__vector_6>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea ec       	ldi	r30, 0xCA	; 202
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	ae 38       	cpi	r26, 0x8E	; 142
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	14 d0       	rcall	.+40     	; 0x5c <main>
  34:	48 c0       	rjmp	.+144    	; 0xc6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <hw_init>:
#include <avr/interrupt.h>
#include <util/delay.h>

void hw_init()
{	//################### INPUT OUTPUT SETUP ###########################################
	DDRB &= ~(1<<PB1);//zcd pin connected to INT0 is set as input
  38:	b9 98       	cbi	0x17, 1	; 23
	PORTB|= (1<<PB1);//internal pull up for INT0 
  3a:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<PB0);//triac pin connected to OC0A is set as output
  3c:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1<<PB2);//control input pin connected to ADC1 and PCINT2 is set as input
  3e:	ba 98       	cbi	0x17, 2	; 23
	//################### ZERO CROSSING INTERRUPT ######################################
	MCUCR |= (1<<ISC00)|(1<<ISC01);//ATTACHING INT0 INTERRUPT ON RISING EDGE
  40:	85 b7       	in	r24, 0x35	; 53
  42:	83 60       	ori	r24, 0x03	; 3
  44:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0);//ENABLE 
  46:	8b b7       	in	r24, 0x3b	; 59
  48:	80 64       	ori	r24, 0x40	; 64
  4a:	8b bf       	out	0x3b, r24	; 59
	//################### TIMER CONFIGURATION SETUP ####################################
	TCCR0A = 0x00;//
  4c:	1f bc       	out	0x2f, r1	; 47
	TCCR0B = 0x00;//
  4e:	13 be       	out	0x33, r1	; 51
	TIMSK0 = 0X00;//CLEAR ALL PREVIOUS CONFIGRATION FROM TIMER CONTROL AND TIMER MASK REGISTERS
  50:	19 be       	out	0x39, r1	; 57
	TIMSK0 |= (1<<OCIE0A)|(1<<TOIE0);//ENABLE OC0A COMPARE INTERRUPT AND TIMER OVERFLOW INTERRUPT
  52:	89 b7       	in	r24, 0x39	; 57
  54:	86 60       	ori	r24, 0x06	; 6
  56:	89 bf       	out	0x39, r24	; 57
	sei();//SET GLOBAL INTERRUP ENABLE FOR USING INTERRUPTS
  58:	78 94       	sei
  5a:	08 95       	ret

0000005c <main>:

int speed_table[23]={20,40,60,70,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,161,162};

int main(void)
{
	hw_init();
  5c:	ed df       	rcall	.-38     	; 0x38 <hw_init>
	
	while (1)
	{
		OCR0A = speed_table[10];//till 15 to 255 //till 20 to 162
  5e:	e0 e6       	ldi	r30, 0x60	; 96
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	84 89       	ldd	r24, Z+20	; 0x14
  64:	86 bf       	out	0x36, r24	; 54
		//calibration from high to low respectively int speed_table[23]={20,40,60,70,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,161,162};
	}
  66:	fd cf       	rjmp	.-6      	; 0x62 <main+0x6>

00000068 <__vector_1>:


//############################### INTERRUPT SERVICE ROUTINE ##############################

ISR(INT0_vect)
{
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	8f 93       	push	r24
	TCNT0 = 0x00;//clear timer counter to 0
  74:	12 be       	out	0x32, r1	; 50
	TCCR0B |= (1<<CS00)|(1<<CS01);//F_CPU div 64 
  76:	83 b7       	in	r24, 0x33	; 51
  78:	83 60       	ori	r24, 0x03	; 3
  7a:	83 bf       	out	0x33, r24	; 51
}
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <__vector_6>:

ISR(TIM0_COMPA_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	8f 93       	push	r24
	PORTB |= (1<<PB0);//turn on triac
  94:	c0 9a       	sbi	0x18, 0	; 24
	TCNT0 = 255-4;//fill the timer leaving only propagation delay time for triac on
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	82 bf       	out	0x32, r24	; 50
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_3>:

ISR(TIM0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	PORTB &= ~(1<<PB0);//turn off triac
  b2:	c0 98       	cbi	0x18, 0	; 24
	TCCR0B &=~((1<<CS00)|(1<<CS01)|(1<<CS02));//remove clock source for stopping timer
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	83 bf       	out	0x33, r24	; 51
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
